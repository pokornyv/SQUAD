# SQUAD - superconducting quantum dot
# fully self-consistent second order perturbation theory solver (flex-like)
# for general case of asymmetric couplings GammaL != GammaR
# uses scipy, optimized on Python 2.7.5
# Vladislav Pokorny, 2015; pokornyv@fzu.cz

import scipy as sp
from scipy.optimize import brentq,fixed_point
from sys import argv,exit,version_info
from time import ctime
from squadlib1 import FillEnergies2,AndreevEnergy,GFresidues,SolveHF,FillGreenHF
from squadlib2 import *

U      = 1.0*eval(argv[1])
Delta  = 1.0*eval(argv[2])
GammaR = 1.0*eval(argv[3])
GammaL = 1.0*eval(argv[4])*GammaR
eps    = 1.0*eval(argv[5])
P      = 1.0*eval(argv[6])
try: chat  = eval(argv[7])
except IndexError: chat = 1	# 1 = write progress lines to standard output
GammaN = 0.0 # only for compatibility with function from ssn branch

WriteOut = 1				# 1 = write datafiles
ed  = eps-U/2.0				# localized energy level shifted to symmetry point
Phi = P*sp.pi
# changed? 4-3-5
ConvD  = 1e-3				# convergence criterium for n and mu
ConvF = 1e-3				# convergence criterium for full self-consistency
ConvX = 1e-4				# convergence criterium for brentq/fixed_point

FitMin = 20.0
FitMax = 30.0

# RuntimeWarning: invalid value encountered in power:
# for KK we need range(N)**3, for large arrays it can 
# hit the limit of 9223372036854775808 == 2**63 of signed int
# large values of N also introduce instability to calcualtion of ABS (2**20-1 @ 1e-4)

N  = 2**19-1				# number of points for bubble/self-energy fft calculation
dE = 1e-4
dE_dec = int(-sp.log10(dE))
En_F   = FillEnergies2(dE,N)

alpha = 1.0

EminExp = 10			# maximum of the frequency range for outputs
SEtype  = 'fsc2nd'		# identifier for output files

rootf = 'fixed_point'	# root finding algorithm for density iterations # fixed point is not tested!!!
#rootf = 'brentq'

# calculating the Hartree-Fock parameters #################
if chat: print '#######################################################################################'
ver = str(version_info[0])+'.'+str(version_info[1])+'.'+str(version_info[2])
if chat: print '# generated by '+str(argv[0])+', python version: '+str(ver)+\
', SciPy version: '+str(sp.version.version)+', '+str(ctime())
if chat: print '# U ={0: .3f}, Delta ={1: .3f}, GammaR ={2: .3f}, GammaL ={3: .3f}, eps ={4: .3f}, Phi/pi ={5: .3f}'\
.format(U,Delta,GammaR,GammaL,eps,P)

if chat: print '# calculating HF solution...'
try:
	[n,mu,wzero,ErrMsgHF] = SolveHF(U,Delta,GammaR,GammaL,eps,P)
except RuntimeError:
	print '#  Warning: failed to calculate HF solution.'
	exit(0)

params_F = [U,Delta,GammaR,GammaL,GammaN,P,eps]
hfe = ed+U*n				# Hartree-Fock energy
wzero = AndreevEnergy(U,GammaR,GammaL,Delta,Phi,hfe,mu)		# HF ABS frequencies
#print '{0: .3f}\t{1: .3f}\t{2: .3f}\t{3: .3f}\t{4: .3f}\t{5: .5f}\t{6: .5f}\t{7: .5f}'\
#.format(U,GammaR,GammaL,eps,P,float(wzero),float(n),float(mu)) # HF solution

if chat: print '# initial HFA values: n ={0: .5f}, mu ={1: .5f}, wzero ={2: .5f}'\
.format(float(n),float(mu),float(wzero))

[GFn_F,GFa_F,EdgePos1,EdgePos2,ABSposGF1,ABSposGF2] = \
FillGreenHF(U,Delta,GammaR,GammaL,hfe,Phi,mu,wzero,En_F)
if WriteOut == 1: WriteFile(En_F,GFn_F,GFa_F,params_F,wzero,'HFgreen',EminExp,10)
[ResGnp1,ResGnh1,ResGa1] = GFresidues(U,Delta,GammaR,GammaL,hfe,Phi,mu,-wzero)	# HF residues
[ResGnp2,ResGnh2,ResGa2] = GFresidues(U,Delta,GammaR,GammaL,hfe,Phi,mu, wzero)
ResOld_F = sp.array([ResGnp1,ResGnp2,ResGa1])
IDin = IntDOS(GFn_F,En_F)

if chat: print '# - energy interval minimum: '+str(En_F[0])
if chat: print '# - input from HF: w(ABS) ={0: .5f}, intDOS ={1: .5f}'\
.format(float(wzero),float(IDin))
if chat: print '# - residues: Gn: [{0: .5f}, {1: .5f}], Ga: {2: .5f}'\
.format(float(ResGnp1),float(ResGnp2),float(ResGa1))
if WriteOut == 1: WriteFile(En_F,GFn_F,GFa_F,params_F,wzero,'HFgreen',EminExp,10)

if chat: print '# starting fully self-consistent iteration cycle:'

f = open('sc.dat','a')
f.write('New calculation started, '+ctime()+'\n')

NI = 1
n_old  = mu_old  = wzero_old  = 1e5
n_prev = mu_prev = wzero_prev = 0.0
while any([sp.fabs(sp.real(n-n_old)) > ConvF,sp.fabs(sp.real(mu-mu_old)) > ConvF]):
	if chat: print '# - iteration {0: 3d}'.format(NI)
	n_old = n
	mu_old = mu
	wzero_old = wzero
	hfe = ed+U*n
	# bubbles and vertex ######################################
	[Chin_F,Chia_F,ABSposChi1,ABSposChi2] = TwoParticleBubbles(GFn_F,GFa_F,En_F,wzero)
	Chin_F = FitTail(En_F,Chin_F,FitMin,FitMax,'even')
	Chia_F = FitTail(En_F,Chia_F,FitMin,FitMax,'odd')
	if SEtype == 'fsc2nd': ChiGamma_F = U**2*(Chin_F+Chia_F)  # second-order kernel of SDE (without HF)
	# dynamical self-energy ###################################
	[Sigman_F,Sigmaa_F] = SelfEnergy(GFn_F,GFa_F,ChiGamma_F,En_F)
	Sigman_F = FitTail(En_F,Sigman_F,FitMin,FitMax,'odd')
	Sigmaa_F = FitTail(En_F,Sigmaa_F,FitMin,FitMax,'even')
	# initial guess for static part of self-energy ############
	if eps == 0.0: n = 0.5
	else: n  = sp.real(ElectronDensity(params_F,n,mu,Sigman_F,Sigmaa_F,En_F))
	mu = sp.real(CooperPairDensity(params_F,n,mu,Sigman_F,Sigmaa_F,En_F))
	# static self-energy ######################################
	if chat: print '# - - iterating densities'
	n_old2 = 1e5
	mu_old2 = 1e5
	'''
	while any([sp.fabs(n-n_old2)>ConvD,sp.fabs(mu-mu_old2)>ConvD]):
		n_old2 = n
		mu_old2 = mu
		if rootf == 'brentq':
			if eps == 0.0: n = 0.5
			else: 
				eqn1 = lambda x: x - ElectronDensity(params_F,x,mu,Sigman_F,Sigmaa_F,En_F)
				n = brentq(eqn1,0.0,1.0,xtol=ConvX)
			eqn2 = lambda x: x - CooperPairDensity(params_F,n,x,Sigman_F,Sigmaa_F,En_F)
			mu = brentq(eqn2,-1.0,1.0,xtol=ConvX)	# check upper and lower limits !!!
		elif rootf == 'fixed_point':
			if eps == 0.0: n = 0.5
			else: 			
				eqn1 = lambda x: ElectronDensity(params_F,x,mu,Sigman_F,Sigmaa_F,En_F)
				n = fixed_point(eqn1,n_old2,xtol=ConvX)
			eqn2 = lambda x: CooperPairDensity(params_F,n,x,Sigman_F,Sigmaa_F,En_F)
			mu = fixed_point(eqn2,mu_old2,xtol=ConvX)
		if chat: print '# - - - n ={0: .5f}, mu ={1: .5f}'.format(float(n),float(mu))
		hfe = ed+U*n
	'''
	hfe = ed+U*n
	# interacting Green's function ############################
	[GFn_F,GFa_F,Det_F,ABS_F,ABSpos_F,Res_F] = \
	FillGreensFunction2(params_F,n,mu,Sigman_F,Sigmaa_F,En_F)
	#print "wzero:",ABS_F
	if   len(ABS_F) == 2:  wzero = ABS_F[1]
	elif len(ABS_F) == 4:  wzero = ABS_F[2]
	else:	wzero = 0.0
	GFn_F = FitTail(En_F,GFn_F,FitMin,FitMax,'odd')
	GFa_F = FitTail(En_F,GFa_F,FitMin,FitMax,'even')
	if chat: print '# - - output from static self-energy iteration: n = {0: .5f}, mu = {1: .5f}'\
	.format(float(n),float(mu))
	IDout = IntDOS(GFn_F,En_F)
	if chat: print '# - - ABS = {0: .5f}, intDOS = {1: .5f}'\
	.format(float(sp.fabs(wzero)),float(IDout))
	if chat: print '# - - residues: Gn: [{0: .5f}, {1: .5f}], Ga: {2: .5f}'\
	.format(float(Res_F[0]),float(Res_F[1]),float(Res_F[2]))
	if chat: print '# - - convergence: n-nold: {0: .5f}, mu-muold: {1: .5f}, w0-w0old: {2: .5f}'\
	.format(float(n-n_old),float(mu-mu_old),float(0))

	# mixing for alpha < 1
	if NI>1:
		#print n,n_prev,mu,mu_prev,wzero,wzero_prev
		n     = alpha*n     + (1.0-alpha)*n_prev
		mu    = alpha*mu    + (1.0-alpha)*mu_prev
		#wzero = alpha*wzero + (1.0-alpha)*wzero_prev
	n_prev = n
	mu_prev = mu
	#wzero_prev = wzero

	n_fin  = ElectronDensity(params_F,n,mu,Sigman_F,Sigmaa_F,En_F)
	mu_fin = CooperPairDensity(params_F,n,mu,Sigman_F,Sigmaa_F,En_F)

	#WriteFile(En_F,GFn_F,GFa_F,params_F,wzero,'f2nd_green'+str(NI),EminExp,10)
	#f.write('{0: 3d}\t{1: .5f}\t{2: .5f}\t{3: .5f}\t{4: .5f}\t{5: .5f}\t{6: .5f}\n'.\
	#format(NI,float(n),float(mu),float(wzero),float(n-n_old),float(mu-mu_old),float(wzero-wzero_old)))

	#print '{0: 3d}\t{1: .5f}\t{2: .5f}\t{3: .5f}\t{4: .5f}\t{5: .5f}\t{6: .5f}\t{7: .5f}\t{8: .5f}'.\
	#format(NI,float(n),float(mu),float(wzero),float(n_fin),float(mu_fin),\
	#float(Res_F[0]),float(Res_F[1]),float(Res_F[2]))

	if NI > 200: break
	NI = NI+1

print '{0: .3f}\t{1: .3f}\t{2: .3f}\t{3: .3f}\t{4: .3f}\t{5: .5f}\t{6: .5f}\t{7: .5f}\t\
{8: .5f}\t{9: .5f}\t{10: .5f}\t{11: 3d}'\
.format(U,GammaR,GammaL,eps,P,float(wzero),float(n_fin),float(mu_fin),Res_F[0],Res_F[1],Res_F[2],NI)

if WriteOut == 1: 
	WriteFile(En_F,Chin_F,Chia_F,params_F,En_F[ABSposChi1],'f2nd_bubbles',EminExp,10)
	WriteFile(En_F,Sigman_F,Sigmaa_F,params_F,0.0,'f2nd_SE',2*EminExp,10)
	WriteFile(En_F,GFn_F,GFa_F,params_F,wzero,'f2nd_green',EminExp,10)

f.close()

