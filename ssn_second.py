# SQUAD - superconducting quantum dot
# self-consistent second order perturbation theory solver
# for case with two sc and one normal lead
# uses scipy, optimized on Python 2.7.5
# Vladislav Pokorny, 2016; pokornyv@fzu.cz

import scipy as sp
from time import ctime
from sys import argv,exit,version_info
from squadlib1 import FillEnergies2
import ssnlib as ssn	# caution about namespace collisions with squadlib1/2 !!!

U      = float(argv[1])
Delta  = float(argv[2])
GammaR = float(argv[3])
GammaL = float(argv[4])*GammaR
GAmmaN = float(argv[5])
eps    = float(argv[6])
P      = float(argv[7])
try: chat  = int(argv[8])
except IndexError: chat = 1	# 1 = write progress lines to standard output

ed    = eps-U/2.0			# localized energy level shifted to symmetry point
Phi   = P*sp.pi
Conv  = 2e-4				# convergence criterium for n and mu
ConvX = 1e-5				# convergence criterium for brentq/fixed_point

N  = 2**19-1				# number of points for bubble/self-energy fft calculation
dE = 1e-4
dE_dec = int(-sp.log10(dE))
En_F   = FillEnergies2(dE,N)
EminExp = 10			# maximum of the frequency range for outputs
SEtype  = 'sc2nd'		# identifier for output files

#rootf = 'fixed_point'	# root finding algorithm for density iterations # fixed point is not tested!!!
rootf = 'brentq'		# starts from wrong first guess

# calculating the Hartree-Fock parameters #################
if chat: print '#######################################################################################'
ver = str(version_info[0])+'.'+str(version_info[1])+'.'+str(version_info[2])
if chat: print '# generated by '+str(argv[0])+', python version: '+str(ver)+\
', SciPy version: '+str(sp.version.version)+', '+str(ctime())
if chat: print '# U ={0: .3f}, Delta ={1: .3f}, GammaR ={2: .3f}, GammaL ={3: .3f}, GammaN ={4: .3f}, eps ={5: .3f}, Phi/pi ={6: .3f}'\
.format(U,Delta,GammaR,GammaL,GammaN,eps,P)

if chat: print '# calculating HF solution...'
try:
	[n,mu,wzero,ErrMsgHF] = SolveHF(U,Delta,GammaR,GammaL,GammaN,eps,P)
except RuntimeError:
	print '#  Warning: failed to calculate HF solution.'
	exit(0)

print n,mu,wzero
