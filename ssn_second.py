# SQUAD - superconducting quantum dot
# self-consistent second order perturbation theory solver
# for case with two sc and one normal lead
# uses scipy, optimized on Python 2.7.5
# Vladislav Pokorny, 2016; pokornyv@fzu.cz

from time import ctime,time
from sys import argv,exit,version_info
import scipy as sp
from scipy.optimize import brentq,fixed_point
from squadlib1 import FillEnergies,QParticleResidue
from squadlib2 import WriteFile,IntDOS
import ssnlib as ssn	# caution about namespace collisions with squadlib1/2 !!!
import params as p

t = time()

U      = float(argv[1])
Delta  = float(argv[2])
GammaR = float(argv[3])
GammaL = float(argv[4])*GammaR
GammaN = float(argv[5])
eps    = float(argv[6])
P      = float(argv[7])

GammaNbar = GammaN/2.0
ed        = eps-U/2.0
Phi       = P*sp.pi

params_F  = [U,Delta,GammaR,GammaL,GammaNbar,Phi,eps]

## M = 21 is a good number for most calculations
N       = 2**p.M-1			# number of points for bubble/SE fft calculation
dE_dec  = int(-sp.log10(p.dE))
En_F    = FillEnergies(p.dE,N)
SEtype  = 'ssn2nd'		# identifier for output files

## calculating the Hartree-Fock parameters ################
if p.chat: 
	print '################################################################################################'
ver = str(version_info[0])+'.'+str(version_info[1])+'.'+str(version_info[2])
if p.chat: print '# generated by '+str(argv[0])+', python version: '+str(ver)+\
', SciPy version: '+str(sp.version.version)+', '+str(ctime())
if p.chat: print '# U ={0: .3f}, Delta ={1: .3f}, GammaR ={2: .3f}, GammaL ={3: .3f}, \
GammaN ={4: .3f}, eps ={5: .3f}, Phi/pi ={6: .3f}'\
.format(U,Delta,GammaR,GammaL,GammaN,eps,P)
if p.chat: print('# energy axis: [{0: .5f} ..{1: .5f}], step ={2: .5f}, length ={3: 3d}'\
.format(En_F[0],En_F[-1],p.dE,len(En_F)))

if p.chat: print '# calculating HF solution...'
try:
	[n,mu,ErrMsgHF] = ssn.SolveHFssn(params_F,p.chat)
except RuntimeError:
	print '#  Warning: failed to calculate HF solution.'
	exit(1)
if p.chat: print '# initial HFA values: n ={0: .6f}, mu ={1: .6f}'.format(float(n),float(mu))

hfe = ed+U*n
[GFn_F,GFa_F,EdgePos1,EdgePos2] = ssn.FillGreenHF(params_F,hfe,mu,En_F)
if p.chat: print '# intDOS(HF) ={0: .6f}'.format(float(IntDOS(GFn_F,En_F)))

if p.W_HFGF: WriteFile(En_F,GFn_F,GFa_F,params_F,0.0,'ssnHF_GF',p.EmaxFiles,p.EstepFiles)
#ssn.PrintDet(params_F,hfe,mu,En_F)

## bubbles and vertex #####################################
[Chin_F,Chia_F] = ssn.TwoParticleBubbles(GFn_F,GFa_F,En_F)
if p.W_Bubble: WriteFile(En_F,Chin_F,Chia_F,params_F,0.0,'ssnHF_bub',p.EmaxFiles,p.EstepFiles)
ChiGamma_F = U**2*(Chin_F+Chia_F)  # second-order kernel of SDE (without HF term)

## dynamical self-energy ##################################
[Sigman_F,Sigmaa_F] = ssn.SelfEnergy(GFn_F,GFa_F,ChiGamma_F,En_F)
if p.W_2ndSE: WriteFile(En_F,Sigman_F,Sigmaa_F,params_F,0.0,'ssn_SE',p.EmaxFiles,p.EstepFiles)
[GFn_F,GFa_F,Det_F] = ssn.FillGreensFunction(params_F,n,mu,Sigman_F,Sigmaa_F,En_F)

## initial guess for static part of self-energy ###########
if eps == 0.0: n = 0.5
else: n = ssn.ElectronDensity(params_F,n,mu,En_F,Sigman_F,Sigmaa_F)
mu      = ssn.CooperPairDensity(params_F,n,mu,En_F,Sigman_F,Sigmaa_F)

if p.chat: print '# initial 2nd order values: n ={0: .6f}, mu ={1: .6f}'\
.format(float(n),float(mu))

## static self-energy #####################################
if p.chat: print('# iterating densities n and mu')
n_old = 1e5
mu_old = 1e5
while any([sp.fabs(n-n_old)>p.ConvN,sp.fabs(mu-mu_old)>p.ConvN]):
	n_old = n
	mu_old = mu
	if p.rootf == 'brentq':
		if eps == 0.0: n = 0.5
		else: 
			eqn1 = lambda x: x - ssn.ElectronDensity(params_F,x,mu,En_F,Sigman_F,Sigmaa_F)
			n = brentq(eqn1,0.0,1.0,xtol = p.ConvX)
		eqn2 = lambda x: x - ssn.CooperPairDensity(params_F,n,x,En_F,Sigman_F,Sigmaa_F)
		mu = brentq(eqn2,p.MuMin,p.MuMax,xtol = p.ConvX)	# check upper and lower limits in ssn.in !!!
	elif p.rootf == 'fixed_point':
		if eps == 0.0: n = 0.5
		else: 			
			eqn1 = lambda x: ssn.ElectronDensity(params_F,x,mu,En_F,Sigman_F,Sigmaa_F)
			n = fixed_point(eqn1,n_old,xtol = p.ConvX)
		eqn2 = lambda x: ssn.CooperPairDensity(params_F,n,x,En_F,Sigman_F,Sigmaa_F)
		mu = fixed_point(eqn2,mu_old,xtol = p.ConvX)
	if p.chat: print('# - n ={0: .6f}, mu ={1: .6f}'.format(float(n),float(mu)))
	hfe = ed + U*n

## interacting Green's function ###########################
[GFn_F,GFa_F,Det_F] = ssn.FillGreensFunction(params_F,n,mu,Sigman_F,Sigmaa_F,En_F)
if p.W_2ndGF: WriteFile(En_F,GFn_F,GFa_F,params_F,0.0,'ssn2nd_GF',p.EmaxFiles,p.EstepFiles)
DOSzero = -sp.imag(GFn_F[N/2])/sp.pi

if p.chat: print '# final 2nd order values: n ={0: .6f}, mu ={1: .6f}'.format(float(n),float(mu))
if p.chat: print '# intDOS(2nd) ={0: .5f}, DoS[0] ={1: .5f}'.format(float(IntDOS(GFn_F,En_F)),float(DOSzero))

## quasiparticle weight ###################################
Z = QParticleResidue(En_F,Sigman_F)
if p.chat: print '# quasiparticle weight Z ={0: .6f}, \
effective mass m* ={1: .6f}m'.format(float(Z),float(1.0/Z))

print '{0: .3f}\t{1: .3f}\t{2: .3f}\t{3: .3f}\t{4: .3f}\t{5: .3f}\t{6: .8f}\t{7: .8f}\t{8: .8f}\t{9: .8f}'\
.format(U,GammaR,GammaL,GammaN,eps,P,float(n),float(mu),float(Z),float(DOSzero))

if p.chat: print('# '+argv[0]+' DONE after '+str(sp.around(time()-t,2))+' seconds.\n')

## ssn_second.py ##

